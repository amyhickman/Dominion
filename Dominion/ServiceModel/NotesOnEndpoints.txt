/card/{code}                                            Returns metadata information about a card type (i.e. Village)

/game/create?options                                    Creates a new game.  Allows other players to join the game.  Redirects to game page.
/game/{gameId}/join                                     Joins a game, if it is not currently in progress, or if it is in progress and the user got disconnected.  Redirects to game page.
/game/{gameId}/start                                    Starts the game once more than 1 person has joined and supply piles are ready.
/game/{gameId}/leave                                    If watching the game, stops watching it.  If a player, resigns, then leaves.
/game/{gameId}/resign                                   Resigns from the game, then leaves.
/game/{gameId}/watch                                    Watches a game as an outside observer.  Redirects to game page.
/game/{gameId}/info                                     return generic game information (players, turn #, supplies, etc)
/game/list                                              Returns a list of active games (game id, players, turn#, etc)

/game/{gameId}/chooseSupplies/{cardCodeList}            For games that have not started, choose supplies.
/game/{gameId}/proposeRandomSupplies/{constraints}      For games that have not started, propose random supplies following the provided constraints, whatever *thosemight be (dunno)

/game/{gameId}/play/discard/{cardId}                     Discards the card specified by {cardId}, if the player has the ability to discard that card.  If not, throws some error.
/game/{gameId}/play/draw/{count}                         Draws {count} cards from the players deck, if the player has the ability to do so.  If not, throws some error.
/game/{gameId}/play/endTurn                              Arbitrarily ends the current player's turn.  Can only be called by the current player.  Otherwise, throws some error.
/game/{gameId}/play/info/{playerId}                      Returns the knowable game state for the player.  If not requested by that player, throws an error.
/game/{gameId}/play/card/{cardId}                        Plays the card specified by {cardId}, if the player has the ability to play that card.  If not, throws some error
/game/{gameId}/play/options								Gets a list of playing options for the player

/game/{gameId}/vetoSupply/{cardCode}                    Vetoes a supply
/game/{gameId}/viewLog/{startingLogId}                  Returns the game log starting with the indicated log message id (optional)



Future crap:


/chat/game/{gameId}/{text}                              Makes a chat message.  If by a player, then to the players and observers.  If by an observer, then only to the observers
/chat/room/{roomId}                                     Gets information about a room
/chat/room/{roomId}/{text}                              Makes a chat message to a room.
/chat/room/{roomId}/destroy                             ADMIN or room owner: destroys the room immediately.
/chat/room/join/{roomId}                                Joins the room specified by {roomId}
/chat/room/leave/{roomId}                               Leaves the room
/chat/room/playerlist/{roomId}                          Gets a list of players in a room                                                 
/chat/room/create/{name}                                Creates a room called {name}
/chat/room/list                                         Gets a list of rooms
/chat/tell/player/{playerId}/{text}                     Sends a private message to a player
/chat/ignore/player/{playerId}/{true/false}             If true, ignores the player indicated by {playerId}.  If false, unignores the player.

